package by.epamtc.jwd.appliances_db.app;

import by.epamtc.jwd.appliances_db.appliances.Device;
import by.epamtc.jwd.appliances_db.condition.DeviceCondition;

import java.io.*;
import java.util.*;
import java.util.regex.Pattern;

public class Solution {

    private String nameDevice;
    private String deviceProperty;
    private String propertyValue;
    private List<Device> selectDevice;
    private String filePath;

    public Solution(String nameDevice, String deviceProperty, String propertyValue) {
        this.nameDevice = nameDevice;
        this.deviceProperty = deviceProperty;
        this.propertyValue = propertyValue;
        selectDevice = new ArrayList<>();
    }

    public void setFilePath(String filePath) {
        this.filePath = filePath;
    }

    public List<Device> runApp() {

        DeviceCondition condition = new DeviceCondition(deviceProperty, propertyValue);

        try (FileReader fileReader = new FileReader(new File(filePath));
             BufferedReader reader = new BufferedReader(fileReader)) {
            String line = reader.readLine();

            while (line != null) {

                if (splitPropertiesDevice(line)[0].trim().equals(nameDevice)) {

                    Device currentDevice = new Device(splitPropertiesDevice(line));
                    condition.setAreaSeeking(currentDevice.getProperty());

                    if (!condition.isCondition()) {
                        selectDevice.add(currentDevice);
                    }
                }

                line = reader.readLine();

            }
        } catch (FileNotFoundException e) {
            System.out.println("Указанный файл не найден!");

        } catch (IOException q) {
            System.out.println(Arrays.toString(q.getStackTrace()));
        }
        return  selectDevice;
    }

    private String[] splitPropertiesDevice(String line) {
        Pattern pattern = Pattern.compile("[=:,]");
        return pattern.split(line);
    }
}
